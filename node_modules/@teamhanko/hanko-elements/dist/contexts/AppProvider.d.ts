import { JSXInternal } from "preact/src/jsx";
import { ComponentChildren, h } from "preact";
import { StateUpdater } from "preact/compat";
import { Hanko, State, FlowError, LastLogin } from "@teamhanko/hanko-frontend-sdk";
import { Translations } from "../i18n/translations";
import SignalLike = JSXInternal.SignalLike;
export type ComponentName = "auth" | "login" | "registration" | "profile" | "events";
export type HankoAuthMode = "registration" | "login";
export interface GlobalOptions {
    hanko?: Hanko;
    injectStyles?: boolean;
    enablePasskeys?: boolean;
    hidePasskeyButtonOnLogin?: boolean;
    translations?: Translations;
    translationsLocation?: string;
    fallbackLanguage?: string;
    storageKey?: string;
}
interface UIState {
    username?: string;
    email?: string;
    error?: FlowError;
    isDisabled?: boolean;
}
interface Context {
    hanko: Hanko;
    setHanko: StateUpdater<Hanko>;
    page: h.JSX.Element;
    setPage: StateUpdater<h.JSX.Element>;
    init: (compName: ComponentName) => void;
    componentName: ComponentName;
    setComponentName: StateUpdater<ComponentName>;
    lang: string;
    hidePasskeyButtonOnLogin: boolean;
    prefilledEmail?: string;
    prefilledUsername?: string;
    uiState: UIState;
    setUIState: StateUpdater<UIState>;
    initialComponentName: ComponentName;
    lastLogin?: LastLogin;
    isOwnFlow: (state: State<any>) => boolean;
}
export declare const AppContext: import("preact").Context<Context>;
interface Props {
    lang?: string | SignalLike<string>;
    prefilledEmail?: string;
    prefilledUsername?: string;
    mode?: HankoAuthMode;
    componentName: ComponentName;
    globalOptions: GlobalOptions;
    children?: ComponentChildren;
    createWebauthnAbortSignal: () => AbortSignal;
}
declare const AppProvider: ({ lang, prefilledEmail, prefilledUsername, globalOptions, createWebauthnAbortSignal, ...props }: Props) => JSXInternal.Element;
export default AppProvider;
